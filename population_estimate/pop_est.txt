
### Data

# y : observed trap counts
# x : model matrix for detection probabilities 
# n_j : number of columns in model matrix
# n_k : number of rows in model matrix 
# n_beta : number of coefficients 
# n_nu  : number of station estimates 
# n_lam : number of basin estimates 
# lam_nu : mapping basin to station abundance 
# nu_y : mapping station abundance to observed trap counts
# u_lam_r : basin abundance mean
# s_lam_r : basin abundance sd
# u_beta_r : coefficient mean
# s_beta_r : coeficient sd



### Parameters

# u_lam : mean basin abundance
# s_lam : overdispersion in basin abundance (across l_groups)
# lam : mean basin abundance
# nu : station abundance
# beta : coefficients for 'logistic regression' modeling of detection probabilities
# betas : mapping of betas to rows in model matrix (replacing intercepts with 0)
# alpha : summed coefficients (with first beta as intercept)
# phi : detection probability (inverse logit transform of alpha)



### Model

model {

  # priors
  u_lam ~ dgamma(pow(u_lam_r[1], 2)/pow(u_lam_r[2], 2), u_lam_r[1]/pow(u_lam_r[2], 2))
  s_lam ~ dgamma(pow(s_lam_r[1], 2)/pow(s_lam_r[2], 2), s_lam_r[1]/pow(s_lam_r[2], 2))
  
  
  
  # basin abundance
  for (i in 1:n_lam) {
    lam[i] ~ dgamma(pow(u_lam, 2)/pow(s_lam, 2), u_lam/pow(s_lam, 2))
  } # i
  
  
  
  # station abundance
  for (i in 1:n_nu) {
    nu[i] ~ dpois(lam[lam_nu[i]])
  } # i
  
  
  
  # coefficients for modeling detection probability
  for (i in 1:n_beta) {
    beta[i] ~ dnorm(u_beta_r[i], 1/pow(s_beta_r[i], 2))
  } # i
  
  
  
  # detection probability (sum betas and inverse logit transform)
  for (k in 1:n_k) {
      for (j in 1:n_j) {
        betas[k, j] = ifelse(x[k, j] == 1, 0, beta[x[k, j]]) 
      } # j
    alpha[k] = beta[1] + sum(betas[k, ])
    phi[k] = exp(alpha[k])/(1 + exp(alpha[k]))
  } # k
  
  
  
  # observation process ('likelihood')
  for (i in 1:length(y)) {
    y[i] ~ dbinom(phi[phi_y[i]], nu[nu_y[i]])
  } # i
}